name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-test:
    name: Rust Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install cargo-zigbuild
      run: cargo install cargo-zigbuild

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Run Rust tests
      run: cargo test --verbose

    - name: Build library
      run: cargo build --release

  go-test:
    name: Go Tests
    runs-on: ${{ matrix.os }}
    needs: rust-test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-zigbuild
      run: cargo install cargo-zigbuild

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # macOS: native toolchain
    - name: Build & set TOKENIZERS_LIB_PATH (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        set -euo pipefail
        LIB_PATH="$(
          cargo build --release --message-format=json |
          jq -r 'select(.reason=="compiler-artifact")
                 | select(.target.kind[]=="cdylib")
                 | .filenames[]
                 | select(endswith(".dylib"))' | head -n1
        )"
        echo "TOKENIZERS_LIB_PATH=$LIB_PATH" >> "$GITHUB_ENV"
        echo "Using $LIB_PATH"

    # Linux: zigbuild for portable glibc/musl
    - name: Build & set TOKENIZERS_LIB_PATH (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        set -euo pipefail
        # Optionally set a target, e.g. x86_64-unknown-linux-gnu or -musl
        TARGET="${{ matrix.target || '' }}"
        ARGS=(--release --message-format=json)
        [[ -n "$TARGET" ]] && ARGS+=(--target "$TARGET")

        LIB_PATH="$(
          cargo zigbuild "${ARGS[@]}" |
          jq -r 'select(.reason=="compiler-artifact")
                 | select(.target.kind[]=="cdylib")
                 | .filenames[]
                 | select(endswith(".so"))' | head -n1
        )"
        echo "TOKENIZERS_LIB_PATH=$LIB_PATH" >> "$GITHUB_ENV"
        echo "Using $LIB_PATH"

    - name: Build Rust library (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $dll = cargo build --release --message-format=json `
        | % { $_ | ConvertFrom-Json -ErrorAction SilentlyContinue } `
        | ? { $_.reason -eq "compiler-artifact" -and $_.target.kind -contains "cdylib" } `
        | % { $_.filenames } | ? { $_ -like "*.dll" } `
        | Get-Item | Sort-Object LastWriteTime -Descending `
        | Select-Object -ExpandProperty FullName -First 1
        
        "TOKENIZERS_LIB_PATH=$dll" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Run Go tests
      run: |
        go mod tidy
        make test

    - name: Run Go linting
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-test, go-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build library
      run: cargo build --release

    - name: Test download functionality (mock)
      run: |
        export TOKENIZERS_LIB_PATH="$(pwd)/target/release/libtokenizers.so"
        go test -v -run "TestDownloadFunctionality|TestGetLibraryInfo"

    - name: Test library loading
      run: |
        export TOKENIZERS_LIB_PATH="$(pwd)/target/release/libtokenizers.so"
        go test -v -run "TestGetCachedLibraryPath|TestCacheDirectory"