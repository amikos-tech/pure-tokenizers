name: Rust Release

# Triggered by rust-v* tags for Rust library releases
on:
  push:
    tags:
      - 'rust-v*'

permissions:
  actions: write
  packages: write
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux GNU targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive-name: libtokenizers-x86_64-unknown-linux-gnu.tar.gz
            lib-name: libtokenizers.so
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive-name: libtokenizers-aarch64-unknown-linux-gnu.tar.gz
            lib-name: libtokenizers.so

          # Linux MUSL targets (for Alpine and other musl-based distros)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            archive-name: libtokenizers-x86_64-unknown-linux-musl.tar.gz
            lib-name: libtokenizers.a
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            archive-name: libtokenizers-aarch64-unknown-linux-musl.tar.gz
            lib-name: libtokenizers.a

          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            archive-name: libtokenizers-x86_64-apple-darwin.tar.gz
            lib-name: libtokenizers.dylib
          - target: aarch64-apple-darwin
            os: macos-latest
            archive-name: libtokenizers-aarch64-apple-darwin.tar.gz
            lib-name: libtokenizers.dylib

          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive-name: libtokenizers-x86_64-pc-windows-msvc.tar.gz
            lib-name: tokenizers.dll

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: ./.github/actions/setup-rust
      with:
        targets: ${{ matrix.target }}
        cache-key-suffix: ${{ matrix.target }}

    - name: Setup cross-compilation
      if: matrix.os == 'ubuntu-latest'
      uses: ./.github/actions/setup-cross-compilation

    - name: Build Rust library
      uses: ./.github/actions/build-rust-library
      with:
        target: ${{ matrix.target }}
        use-cross: ${{ matrix.os == 'ubuntu-latest' && 'true' || 'false' }}

    - name: Prepare release archive (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        set -euo pipefail

        # Create staging directory
        mkdir -p release-staging

        # Copy the library
        LIBRARY_PATH="target/${{ matrix.target }}/release/${{ matrix.lib-name }}"
        if [ -f "$LIBRARY_PATH" ]; then
          cp "$LIBRARY_PATH" "release-staging/${{ matrix.lib-name }}"
        else
          echo "Library not found at: $LIBRARY_PATH"
          exit 1
        fi

        # Generate SHA256 for the library only
        cd release-staging
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          shasum -a 256 "${{ matrix.lib-name }}" > "${{ matrix.lib-name }}.sha256"
        else
          sha256sum "${{ matrix.lib-name }}" > "${{ matrix.lib-name }}.sha256"
        fi

        # Copy README and LICENSE if they exist
        cd ..
        [ -f README.md ] && cp README.md release-staging/
        [ -f LICENSE.md ] && cp LICENSE.md release-staging/

        # Create the final archive with all contents
        cd release-staging
        tar -czf ../${{ matrix.archive-name }} *
        cd ..

        # Display archive contents for verification
        echo "Archive contents:"
        tar -tzf ${{ matrix.archive-name }}

    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Create staging directory
        New-Item -ItemType Directory -Force -Path release-staging

        # Copy the library
        $libraryPath = "target/${{ matrix.target }}/release/${{ matrix.lib-name }}"
        if (Test-Path $libraryPath) {
          Copy-Item -Path $libraryPath -Destination "release-staging/${{ matrix.lib-name }}"
        } else {
          Write-Error "Library not found at: $libraryPath"
          exit 1
        }

        # Generate SHA256 for the library only
        Set-Location release-staging
        $hash = Get-FileHash "${{ matrix.lib-name }}" -Algorithm SHA256
        "$($hash.Hash)  ${{ matrix.lib-name }}" | Out-File "${{ matrix.lib-name }}.sha256" -Encoding ascii

        # Copy README and LICENSE if they exist
        Set-Location ..
        if (Test-Path README.md) {
          Copy-Item -Path README.md -Destination release-staging/
        }
        if (Test-Path LICENSE.md) {
          Copy-Item -Path LICENSE.md -Destination release-staging/
        }

        # Create the final archive with all contents
        Set-Location release-staging
        tar -czf ..\${{ matrix.archive-name }} *
        Set-Location ..

        # Display archive contents for verification
        Write-Host "Archive contents:"
        tar -tzf ${{ matrix.archive-name }}

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-build
        path: ${{ matrix.archive-name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Each artifact is already a complete tar.gz archive
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;

          # Verify archives
          echo "Release assets:"
          ls -la release-assets/

          # Show contents of one archive as example
          echo "Example archive contents:"
          tar -tzf release-assets/libtokenizers-x86_64-unknown-linux-gnu.tar.gz || true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          name: Rust Library ${{ github.ref_name }}
          body: |
            ## Rust Tokenizers Library Release

            This release contains pre-built tokenizers libraries for multiple platforms.

            ### Supported Platforms
            - Linux x86_64 (GNU)
            - Linux aarch64 (GNU)
            - Linux x86_64 (MUSL)
            - Linux aarch64 (MUSL)
            - macOS x86_64
            - macOS aarch64 (Apple Silicon)
            - Windows x86_64

            ### Installation
            Download the appropriate archive for your platform and extract the library file.

            ### Usage with Go bindings
            The Go bindings will automatically download these libraries when needed.
            You can also set `TOKENIZERS_LIB_PATH` environment variable to use a specific library.
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
