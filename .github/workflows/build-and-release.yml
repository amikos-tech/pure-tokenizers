name: Build and Release

on:
  release:
    types: [ created ]
permissions:
  actions: write
  packages: write
env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux GNU targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive-name: libtokenizers-x86_64-unknown-linux-gnu.tar.gz
            lib-name: libtokenizers.so
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive-name: libtokenizers-aarch64-unknown-linux-gnu.tar.gz
            lib-name: libtokenizers.so

          # Linux MUSL targets (for Alpine and other musl-based distros)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            archive-name: libtokenizers-x86_64-unknown-linux-musl.tar.gz
            lib-name: libtokenizers.a
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            archive-name: libtokenizers-aarch64-unknown-linux-musl.tar.gz
            lib-name: libtokenizers.a

          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            archive-name: libtokenizers-x86_64-apple-darwin.tar.gz
            lib-name: libtokenizers.dylib
          - target: aarch64-apple-darwin
            os: macos-latest
            archive-name: libtokenizers-aarch64-apple-darwin.tar.gz
            lib-name: libtokenizers.dylib

          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive-name: libtokenizers-x86_64-pc-windows-msvc.tar.gz
            lib-name: tokenizers.dll

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          musl-tools \
          g++-aarch64-linux-gnu \
          libc6-dev-arm64-cross \
          pkg-config

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: cross-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Clean target dir (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: rm -rf target

    - name: Clean target dir (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: Remove-Item -Recurse -Force target -ErrorAction SilentlyContinue

    - name: Build library (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cross build --release --target ${{ matrix.target }}

    - name: Build library (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Build library (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Prepare release archive (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        set -euo pipefail
        
        # Create staging directory
        mkdir -p release-staging
        
        # Copy the library
        LIBRARY_PATH="target/${{ matrix.target }}/release/${{ matrix.lib-name }}"
        if [ -f "$LIBRARY_PATH" ]; then
          cp "$LIBRARY_PATH" "release-staging/${{ matrix.lib-name }}"
        else
          echo "Library not found at: $LIBRARY_PATH"
          exit 1
        fi
        
        # Generate SHA256 for the library only
        cd release-staging
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          shasum -a 256 "${{ matrix.lib-name }}" > "${{ matrix.lib-name }}.sha256"
        else
          sha256sum "${{ matrix.lib-name }}" > "${{ matrix.lib-name }}.sha256"
        fi
        
        # Copy README and LICENSE if they exist
        cd ..
        [ -f README.md ] && cp README.md release-staging/
        [ -f LICENSE ] && cp LICENSE release-staging/
        
        # Create the final archive with all contents
        cd release-staging
        tar -czf ../${{ matrix.archive-name }} *
        cd ..
        
        # Display archive contents for verification
        echo "Archive contents:"
        tar -tzf ${{ matrix.archive-name }}

    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Create staging directory
        New-Item -ItemType Directory -Force -Path release-staging
        
        # Copy the library
        $libraryPath = "target/${{ matrix.target }}/release/${{ matrix.lib-name }}"
        if (Test-Path $libraryPath) {
          Copy-Item -Path $libraryPath -Destination "release-staging/${{ matrix.lib-name }}"
        } else {
          Write-Error "Library not found at: $libraryPath"
          exit 1
        }
        
        # Generate SHA256 for the library only
        Set-Location release-staging
        $hash = Get-FileHash "${{ matrix.lib-name }}" -Algorithm SHA256
        "$($hash.Hash)  ${{ matrix.lib-name }}" | Out-File "${{ matrix.lib-name }}.sha256" -Encoding ascii
        
        # Copy README and LICENSE if they exist
        Set-Location ..
        if (Test-Path README.md) {
          Copy-Item -Path README.md -Destination release-staging/
        }
        if (Test-Path LICENSE) {
          Copy-Item -Path LICENSE -Destination release-staging/
        }
        
        # Create the final archive with all contents
        Set-Location release-staging
        tar -czf ..\${{ matrix.archive-name }} *
        Set-Location ..
        
        # Display archive contents for verification
        Write-Host "Archive contents:"
        tar -tzf ${{ matrix.archive-name }}

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-build
        path: ${{ matrix.archive-name }}

  test:
    name: Test Go bindings
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Download Linux x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: x86_64-unknown-linux-gnu-build
          path: ./

      - name: Extract library for testing
        run: |
          mkdir -p test-lib
          tar -xzf libtokenizers-x86_64-unknown-linux-gnu.tar.gz -C test-lib
          export TOKENIZERS_LIB_PATH="$(pwd)/test-lib/libtokenizers.so"
          echo "TOKENIZERS_LIB_PATH=$TOKENIZERS_LIB_PATH" >> $GITHUB_ENV

          # Verify extraction
          echo "Extracted files:"
          ls -la test-lib/

      - name: Run Go tests
        run: |
          go mod tidy
          go test -v ./...
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test]
    # This job runs when the workflow is triggered by a release creation
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Each artifact is already a complete tar.gz archive
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          
          # Verify archives
          echo "Release assets:"
          ls -la release-assets/
          
          # Show contents of one archive as example
          echo "Example archive contents:"
          tar -tzf release-assets/libtokenizers-x86_64-unknown-linux-gnu.tar.gz || true

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          # Since this workflow is triggered by a release event,
          # the release already exists, so we just add the assets
          fail_on_unmatched_files: true
          # The tag is automatically inferred from the release event
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
