name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive-name: libtokenizers-x86_64-unknown-linux-gnu.tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive-name: libtokenizers-aarch64-unknown-linux-gnu.tar.gz
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            archive-name: libtokenizers-x86_64-apple-darwin.tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            archive-name: libtokenizers-aarch64-apple-darwin.tar.gz
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive-name: libtokenizers-x86_64-pc-windows-msvc.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build library
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.target }}" = "x86_64-apple-darwin" ] || [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
          cp target/${{ matrix.target }}/release/libtokenizers.dylib artifacts/
        else
          cp target/${{ matrix.target }}/release/libtokenizers.so artifacts/
        fi

    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir artifacts
        copy target\${{ matrix.target }}\release\libtokenizers.dll artifacts\

    - name: Create archive and checksum (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd artifacts
        tar -czf ../${{ matrix.archive-name }} *
        cd ..
        sha256sum ${{ matrix.archive-name }} > ${{ matrix.archive-name }}.sha256

    - name: Create archive and checksum (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd artifacts
        tar -czf ..\${{ matrix.archive-name }} *
        cd ..
        certutil -hashfile ${{ matrix.archive-name }} SHA256 | findstr /v "hash" | findstr /v "CertUtil" > ${{ matrix.archive-name }}.sha256

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-build
        path: |
          ${{ matrix.archive-name }}
          ${{ matrix.archive-name }}.sha256

  test:
    name: Test Go bindings
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Download Linux x86_64 artifact
      uses: actions/download-artifact@v4
      with:
        name: x86_64-unknown-linux-gnu-build
        path: ./

    - name: Extract library for testing
      run: |
        mkdir -p test-lib
        tar -xzf libtokenizers-x86_64-unknown-linux-gnu.tar.gz -C test-lib
        export TOKENIZERS_LIB_PATH="$(pwd)/test-lib/libtokenizers.so"
        echo "TOKENIZERS_LIB_PATH=$TOKENIZERS_LIB_PATH" >> $GITHUB_ENV

    - name: Run Go tests
      run: |
        go mod tidy
        go test -v ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
        find artifacts -name "*.sha256" -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}